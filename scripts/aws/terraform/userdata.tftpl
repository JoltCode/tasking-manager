#!/bin/bash
set -x,
sleep 60,
export DEBIAN_FRONTEND=noninteractive,
export LC_ALL="en_US.UTF-8",
export LC_CTYPE="en_US.UTF-8",
dpkg-reconfigure --frontend=noninteractive locales,
sudo apt-get -y update,
sudo DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade,
sudo apt-get -y install curl,
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -,
sudo sh -c \'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" > /etc/apt/sources.list.d/PostgreSQL.list\',
sudo apt-get update -y,
sudo apt-get install -y postgresql-12,
sudo apt-get -y install postgresql-12-postgis-3,
sudo apt-get -y install postgresql-12-postgis-3-scripts,
sudo apt-get -y install postgis,
sudo apt-get -y install libpq-dev,
sudo apt-get -y install libxml2,
sudo apt-get -y install wget libxml2-dev,
sudo apt-get -y install libgeos-3.8.0,
sudo apt-get -y install libgeos-dev,
sudo apt-get -y install libproj15,
sudo apt-get -y install libproj-dev,
sudo apt-get -y install python3-pip libgdal-dev libpq-dev python3-psycopg2 python3.8-venv,
sudo apt-get -y install libjson-c-dev,
sudo apt-get -y install git,
sudo apt-get -y install awscli,
sudo apt-get -y install ruby,
git clone --recursive https://github.com/hotosm/tasking-manager.git,
cd tasking-manager/,
git reset --hard ${GitSha},
python3 -m venv ./venv,
. ./venv/bin/activate,
pip install --upgrade pip,
pip install -r requirements.txt,
echo "fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf",
export LC_ALL=C,
wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb,
dpkg -i /tmp/amazon-cloudwatch-agent.deb,
wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz,
python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz,
echo "Exporting environment variables:",
export NEW_RELIC_LICENSE=${NewRelicLicense},
export POSTGRES_ENDPOINT=', cf.getAtt('TaskingManagerRDS','Endpoint.Address'),

export POSTGRES_DB="${PostgresDB}",
export POSTGRES_PASSWORD="${PostgresPassword}", 
export POSTGRES_USER="${PostgresUser}",
export TM_APP_BASE_URL="${TaskingManagerAppBaseUrl}",
export TM_ENVIRONMENT="${AWS::StackName}",
export TM_CLIENT_ID="${TaskingManagerOAuthClientID}",
export TM_CLIENT_SECRET="${TaskingManagerOAuthClientSecret}",
export TM_REDIRECT_URI="${TaskingManagerAppBaseUrl}/authorized",
export TM_SCOPE="read_prefs write_api",
export TM_SECRET="${TaskingManagerSecret}",
export TM_SMTP_HOST="${TaskingManagerSMTPHost}",
export TM_SMTP_PASSWORD="${TaskingManagerSMTPPassword}",
export TM_SMTP_PORT="${TaskingManagerSMTPPort}",
export TM_SMTP_USER="${TaskingManagerSMTPUser}",
export TM_SMTP_USE_SSL="${TaskingManagerSMTPSSL}",
export TM_SMTP_USE_TLS="${TaskingManagerSMTPTLS}",
export TM_DEFAULT_CHANGESET_COMMENT="${TaskingManagerDefaultChangesetComment}",
export TM_EMAIL_FROM_ADDRESS="${TaskingManagerEmailFromAddress}",
export TM_EMAIL_CONTACT_ADDRESS="${TaskingManagerEmailContactAddress}",
export TM_LOG_LEVEL="${TaskingManagerLogLevel}",
export TM_LOG_DIR="${TaskingManagerLogDirectory}",
export TM_ORG_NAME="${TaskingManagerOrgName}",
export TM_ORG_CODE="${TaskingManagerOrgCode}",
export TM_ORG_LOGO="${TaskingManagerLogo}",
export TM_IMAGE_UPLOAD_API_URL="${TaskingManagerImageUploadAPIURL}",
export TM_IMAGE_UPLOAD_API_KEY="${TaskingManagerImageUploadAPIKey}",
psql "host=$POSTGRES_ENDPOINT dbname=$POSTGRES_DB user=$POSTGRES_USER password=$POSTGRES_PASSWORD" -c "CREATE EXTENSION IF NOT EXISTS postgis",
if DatabaseDumpFileGiven, 'aws s3 cp ${DatabaseDump} dump.sql; sudo -u postgres psql "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_ENDPOINT/$POSTGRES_DB" < dump.sql'),
./venv/bin/python3 manage.py db upgrade,
echo "------------------------------------------------------------",
pushd /home/ubuntu,
wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install,
chmod +x ./install && sudo ./install auto,
sudo systemctl start codedeploy-agent,
popd,
export NEW_RELIC_LICENSE_KEY=${NewRelicLicense},
export TM_SENTRY_BACKEND_DSN=${SentryBackendDSN},
export NEW_RELIC_ENVIRONMENT=$TM_ENVIRONMENT,
NEW_RELIC_CONFIG_FILE=./scripts/aws/cloudformation/newrelic.ini newrelic-admin run-program gunicorn -b 0.0.0.0:8000 --worker-class gevent --workers 5 --timeout 179 --access-logfile ${TaskingManagerLogDirectory}/gunicorn-access.log --access-logformat \'%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s %(T)s \"%(f)s\" \"%(a)s\"\' manage:application &,
sudo /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource TaskingManagerLaunchConfiguration --region ${AWS::Region} --configsets default,
/opt/aws/bin/cfn-signal --exit-code $? --region ${AWS::Region} --resource TaskingManagerASG --stack ${AWS::StackName}
